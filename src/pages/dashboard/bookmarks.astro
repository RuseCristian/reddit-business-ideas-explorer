---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import DashboardHeader from "../../components/dashboard/DashboardHeader.astro";
import UnifiedOpportunityCard from "../../components/dashboard/UnifiedOpportunityCard.astro";
import "../../styles/dashboard-opportunity-cards.scss";
---

<script>
	// TypeScript declarations for window functions
	declare global {
		interface Window {
			removeBookmark: (opportunityId: number) => Promise<void>;
			trackActivity: (activityType: string, resourceId: number, resourceType: string, metadata?: Record<string, any>) => Promise<void>;
		}
	}

	// Activity tracking utility
	const trackActivity = async (
		activityType: string, 
		resourceId: number, 
		resourceType: string, 
		metadata: Record<string, any> = {}
	): Promise<void> => {
		try {
			await fetch("/api/user/track-activity", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					activityType,
					resourceId,
					resourceType,
					metadata,
				}),
			});
		} catch (error) {
			console.log("Activity tracking failed:", error);
		}
	};

	// Load bookmarks data
	const loadBookmarks = async () => {
		try {
			const response = await fetch("/api/user/bookmarks");
			
			if (response.ok) {
				const data = await response.json();
				
				if (data.success) {
					const { opportunities, count } = data.data;
					updateBookmarksDisplay(opportunities, count);
				} else {
					showEmptyState("Failed to load bookmarks");
				}
			} else if (response.status === 401) {
				showAuthPrompt();
			} else {
				showEmptyState("Error loading bookmarks");
			}
		} catch (error) {
			console.log("Bookmarks fetch failed:", error);
			showEmptyState("Failed to load bookmarks");
		}
	};

	// Remove bookmark function
	const removeBookmark = async (opportunityId: number) => {
		try {
			const response = await fetch(`/api/user/bookmarks?opportunityId=${opportunityId}`, {
				method: 'DELETE',
			});
			
			if (response.ok) {
				// Track the removal
				await trackActivity('unsaved_opportunity', opportunityId, 'opportunity', {
					source: 'bookmarks_page'
				});
				
				// Reload bookmarks
				loadBookmarks();
			} else {
				alert('Failed to remove bookmark');
			}
		} catch (error) {
			console.error("Failed to remove bookmark:", error);
			alert('Failed to remove bookmark');
		}
	};

	// Update bookmarks display
	function updateBookmarksDisplay(opportunities: any[], count: number) {
		const container = document.querySelector('.bookmarks-content');
		const countElement = document.querySelector('.bookmarks-count');
		
		if (countElement) {
			countElement.textContent = `${count} saved opportunities`;
		}
		
		if (container && opportunities.length > 0) {
			container.innerHTML = opportunities.map((opp: any) => {
				return `
					<div class="dashboard-opportunity-card" onclick="viewOpportunity(${opp.id})">
						<div class="dashboard-opportunity-info">
							<h4>${opp.title}</h4>
							<p class="dashboard-opportunity-description">${opp.description.length > 100 ? opp.description.substring(0, 100) + '...' : opp.description}</p>
							<div class="dashboard-opportunity-meta">
								<span class="dashboard-subreddit-badge">${opp.subreddit}</span>
								<span class="dashboard-impact-badge">${opp.impactScore.toFixed(1)}</span>
								<span class="dashboard-time-info">${opp.timeText}</span>
							</div>
						</div>
						<div class="dashboard-card-actions">
							<button class="dashboard-remove-btn" onclick="event.stopPropagation(); removeBookmark(${opp.id})" title="Remove bookmark">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
									<path d="M3 6h18m-2 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"/>
								</svg>
							</button>
							<a href="/dashboard/business-opportunity/${opp.id}" class="dashboard-view-button" onclick="event.stopPropagation(); trackActivity('viewed_opportunity', ${opp.id}, 'opportunity', {source: 'bookmarks_page'});">
								View Details
							</a>
						</div>
					</div>
				`;
			}).join('');
		} else if (container) {
			showEmptyState();
		}
	}

	// Add global function for opportunity viewing
	function viewOpportunity(id: number) {
		trackActivity('viewed_opportunity', id, 'opportunity', {source: 'bookmarks_page'});
		window.location.href = `/dashboard/business-opportunity/${id}`;
	}

	// Show empty state
	function showEmptyState(message = "No bookmarks yet") {
		const container = document.querySelector('.bookmarks-content');
		if (container) {
			container.innerHTML = `
				<div class="empty-state">
					<div class="empty-icon">ðŸ”–</div>
					<h3>${message}</h3>
					<p>Save opportunities from the search page to see them here.</p>
					<a href="/dashboard/search" class="empty-action">Browse Opportunities</a>
				</div>
			`;
		}
	}

	// Show auth prompt
	function showAuthPrompt() {
		const container = document.querySelector('.bookmarks-content');
		if (container) {
			container.innerHTML = `
				<div class="auth-prompt">
					<p>Sign in to see your saved bookmarks</p>
					<a href="/sign-in" class="auth-button">Sign In</a>
				</div>
			`;
		}
	}

	// Make functions globally available
	(window as any).removeBookmark = removeBookmark;
	(window as any).trackActivity = trackActivity;
	(window as any).viewOpportunity = viewOpportunity;

	// Load bookmarks when page loads
	document.addEventListener('DOMContentLoaded', loadBookmarks);
</script>

<DashboardLayout>
	<div class="bookmarks-page">
		<DashboardHeader 
			title="ðŸ“š My Bookmarks" 
			subtitle="Manage your saved business opportunities"
		/>

		<div class="bookmarks-section">
			<div class="bookmarks-header">
				<h2>Saved Opportunities</h2>
				<span class="bookmarks-count">Loading...</span>
			</div>
			
			<div class="bookmarks-content">
				<div class="loading-state">
					<div class="loading-spinner"></div>
					<p>Loading your bookmarks...</p>
				</div>
			</div>
		</div>
	</div>
</DashboardLayout>

<style lang="scss">
	.bookmarks-page {
		max-width: 1000px;
		margin: 0 auto;
	}

	.bookmarks-section {
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 12px;
		overflow: hidden;
	}

	.bookmarks-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem;
		border-bottom: 1px solid var(--border-color);
		background: var(--bg-secondary);

		h2 {
			color: var(--text-primary);
			margin: 0;
			font-size: 1.25rem;
			font-weight: 600;
		}

		.bookmarks-count {
			color: var(--text-secondary);
			font-size: 0.875rem;
			background: var(--bg-tertiary);
			padding: 0.5rem 1rem;
			border-radius: 20px;
			font-weight: 500;
		}
	}

	.bookmarks-content {
		padding: 1.5rem;
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.loading-state, .empty-state, .auth-prompt {
		text-align: center;
		padding: 3rem 2rem;
		color: var(--text-secondary);
	}

	.loading-spinner {
		width: 40px;
		height: 40px;
		border: 3px solid var(--border-color);
		border-top: 3px solid var(--accent-primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
		margin: 0 auto 1rem;
	}

	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.empty-state {
		.empty-icon {
			font-size: 3rem;
			margin-bottom: 1rem;
			opacity: 0.5;
		}

		h3 {
			margin: 0 0 0.5rem 0;
			color: var(--text-primary);
		}

		p {
			margin: 0 0 1.5rem 0;
		}

		.empty-action {
			background: var(--accent-primary);
			color: white;
			padding: 0.75rem 1.5rem;
			border-radius: 8px;
			text-decoration: none;
			font-weight: 600;
			transition: all 0.2s ease;

			&:hover {
				background: var(--accent-secondary);
				transform: translateY(-1px);
			}
		}
	}

	.auth-prompt {
		.auth-button {
			background: var(--accent-primary);
			color: white;
			padding: 0.75rem 1.5rem;
			border-radius: 8px;
			text-decoration: none;
			font-weight: 600;
		}
	}
</style>
